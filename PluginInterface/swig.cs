//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.1
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace FreeSWITCH {

public class IvrMenu : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IvrMenu(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IvrMenu obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~IvrMenu() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_IvrMenu(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public IvrMenu(IvrMenu main, string name, string greeting_sound, string short_greeting_sound, string invalid_sound, string exit_sound, string transfer_sound, string confirm_macro, string confirm_key, string tts_engine, string tts_voice, int confirm_attempts, int inter_timeout, int digit_len, int timeout, int max_failures, int max_timeouts) : this(NativePINVOKE.new_IvrMenu(IvrMenu.getCPtr(main), name, greeting_sound, short_greeting_sound, invalid_sound, exit_sound, transfer_sound, confirm_macro, confirm_key, tts_engine, tts_voice, confirm_attempts, inter_timeout, digit_len, timeout, max_failures, max_timeouts), true) {
  }

  public void bindAction(string action, string arg, string bind) {
    NativePINVOKE.IvrMenu_bindAction(swigCPtr, action, arg, bind);
  }

  public void Execute(CoreSession session, string name) {
    NativePINVOKE.IvrMenu_Execute(swigCPtr, CoreSession.getCPtr(session), name);
  }

}

}
namespace FreeSWITCH {

public class Api : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Api(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Api obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Api() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_Api(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Api(CoreSession s) : this(NativePINVOKE.new_Api(CoreSession.getCPtr(s)), true) {
  }

  public string Execute(string command, string data) {
    string ret = NativePINVOKE.Api_Execute(swigCPtr, command, data);
    return ret;
  }

  public string ExecuteString(string command) {
    string ret = NativePINVOKE.Api_ExecuteString(swigCPtr, command);
    return ret;
  }

  public string getTime() {
    string ret = NativePINVOKE.Api_getTime(swigCPtr);
    return ret;
  }

}

}
namespace FreeSWITCH {

public class input_callback_state_t : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal input_callback_state_t(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(input_callback_state_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~input_callback_state_t() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_input_callback_state_t(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_void function {
    set {
      NativePINVOKE.input_callback_state_t_function_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.input_callback_state_t_function_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void threadState {
    set {
      NativePINVOKE.input_callback_state_t_threadState_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.input_callback_state_t_threadState_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_void extra {
    set {
      NativePINVOKE.input_callback_state_t_extra_set(swigCPtr, SWIGTYPE_p_void.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.input_callback_state_t_extra_get(swigCPtr);
      SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
      return ret;
    } 
  }

  public string funcargs {
    set {
      NativePINVOKE.input_callback_state_t_funcargs_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.input_callback_state_t_funcargs_get(swigCPtr);
      return ret;
    } 
  }

  public input_callback_state_t() : this(NativePINVOKE.new_input_callback_state_t(), true) {
  }

}

}
namespace FreeSWITCH {

public enum session_flag_t {
  S_HUP = (1 << 0),
  S_FREE = (1 << 1),
  S_RDLOCK = (1 << 2)
}

}
namespace FreeSWITCH {

public class DTMF : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DTMF(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DTMF obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DTMF() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_DTMF(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public char digit {
    set {
      NativePINVOKE.DTMF_digit_set(swigCPtr, value);
    } 
    get {
      char ret = NativePINVOKE.DTMF_digit_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t duration {
    set {
      NativePINVOKE.DTMF_duration_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(NativePINVOKE.DTMF_duration_get(swigCPtr), true);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public DTMF(char idigit, SWIGTYPE_p_uint32_t iduration) : this(NativePINVOKE.new_DTMF(idigit, SWIGTYPE_p_uint32_t.getCPtr(iduration)), true) {
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
namespace FreeSWITCH {

public partial class Stream : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Stream(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Stream obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Stream() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_Stream(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public Stream() : this(NativePINVOKE.new_Stream__SWIG_0(), true) {
  }

  public Stream(SWIGTYPE_p_switch_stream_handle_t arg0) : this(NativePINVOKE.new_Stream__SWIG_1(SWIGTYPE_p_switch_stream_handle_t.getCPtr(arg0)), true) {
  }

  public string read(SWIGTYPE_p_int len) {
    string ret = NativePINVOKE.Stream_read(swigCPtr, SWIGTYPE_p_int.getCPtr(len));
    return ret;
  }

  public void Write(string data) {
    NativePINVOKE.Stream_Write(swigCPtr, data);
  }

  public void raw_write(string data, int len) {
    NativePINVOKE.Stream_raw_write(swigCPtr, data, len);
  }

  public string get_data() {
    string ret = NativePINVOKE.Stream_get_data(swigCPtr);
    return ret;
  }

}

}
namespace FreeSWITCH {

public partial class Event : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Event(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Event obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Event() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_Event(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_switch_event_t InternalEvent {
    set {
      NativePINVOKE.Event_InternalEvent_set(swigCPtr, SWIGTYPE_p_switch_event_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.Event_InternalEvent_get(swigCPtr);
      SWIGTYPE_p_switch_event_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_switch_event_t(cPtr, false);
      return ret;
    } 
  }

  public string serialized_string {
    set {
      NativePINVOKE.Event_serialized_string_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.Event_serialized_string_get(swigCPtr);
      return ret;
    } 
  }

  public int mine {
    set {
      NativePINVOKE.Event_mine_set(swigCPtr, value);
    } 
    get {
      int ret = NativePINVOKE.Event_mine_get(swigCPtr);
      return ret;
    } 
  }

  public Event(string type, string subclass_name) : this(NativePINVOKE.new_Event__SWIG_0(type, subclass_name), true) {
  }

  public Event(SWIGTYPE_p_switch_event_t wrap_me, int free_me) : this(NativePINVOKE.new_Event__SWIG_1(SWIGTYPE_p_switch_event_t.getCPtr(wrap_me), free_me), true) {
  }

  public int chat_execute(string app, string data) {
    int ret = NativePINVOKE.Event_chat_execute(swigCPtr, app, data);
    return ret;
  }

  public int chat_send(string dest_proto) {
    int ret = NativePINVOKE.Event_chat_send(swigCPtr, dest_proto);
    return ret;
  }

  public string Serialize(string format) {
    string ret = NativePINVOKE.Event_Serialize(swigCPtr, format);
    return ret;
  }

  public bool SetPriority(SWIGTYPE_p_switch_priority_t priority) {
    bool ret = NativePINVOKE.Event_SetPriority(swigCPtr, SWIGTYPE_p_switch_priority_t.getCPtr(priority));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetHeader(string header_name) {
    string ret = NativePINVOKE.Event_GetHeader(swigCPtr, header_name);
    return ret;
  }

  public string GetBody() {
    string ret = NativePINVOKE.Event_GetBody(swigCPtr);
    return ret;
  }

  public string GetEventType() {
    string ret = NativePINVOKE.Event_GetEventType(swigCPtr);
    return ret;
  }

  public bool AddBody(string value) {
    bool ret = NativePINVOKE.Event_AddBody(swigCPtr, value);
    return ret;
  }

  public bool AddHeader(string header_name, string value) {
    bool ret = NativePINVOKE.Event_AddHeader(swigCPtr, header_name, value);
    return ret;
  }

  public bool DeleteHeader(string header_name) {
    bool ret = NativePINVOKE.Event_DeleteHeader(swigCPtr, header_name);
    return ret;
  }

  public bool Fire() {
    bool ret = NativePINVOKE.Event_Fire(swigCPtr);
    return ret;
  }

}

}
namespace FreeSWITCH {

public class EventConsumer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EventConsumer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EventConsumer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EventConsumer() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_EventConsumer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_switch_queue_t events {
    set {
      NativePINVOKE.EventConsumer_events_set(swigCPtr, SWIGTYPE_p_switch_queue_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.EventConsumer_events_get(swigCPtr);
      SWIGTYPE_p_switch_queue_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_switch_queue_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_switch_event_types_t e_event_id {
    set {
      NativePINVOKE.EventConsumer_e_event_id_set(swigCPtr, SWIGTYPE_p_switch_event_types_t.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_switch_event_types_t ret = new SWIGTYPE_p_switch_event_types_t(NativePINVOKE.EventConsumer_e_event_id_get(swigCPtr), true);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string e_callback {
    set {
      NativePINVOKE.EventConsumer_e_callback_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.EventConsumer_e_callback_get(swigCPtr);
      return ret;
    } 
  }

  public string e_subclass_name {
    set {
      NativePINVOKE.EventConsumer_e_subclass_name_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.EventConsumer_e_subclass_name_get(swigCPtr);
      return ret;
    } 
  }

  public string e_cb_arg {
    set {
      NativePINVOKE.EventConsumer_e_cb_arg_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.EventConsumer_e_cb_arg_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_switch_event_node_t enodes {
    set {
      NativePINVOKE.EventConsumer_enodes_set(swigCPtr, SWIGTYPE_p_p_switch_event_node_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.EventConsumer_enodes_get(swigCPtr);
      SWIGTYPE_p_p_switch_event_node_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_switch_event_node_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_uint32_t node_index {
    set {
      NativePINVOKE.EventConsumer_node_index_set(swigCPtr, SWIGTYPE_p_uint32_t.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(NativePINVOKE.EventConsumer_node_index_get(swigCPtr), true);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public EventConsumer(string event_name, string subclass_name, int len) : this(NativePINVOKE.new_EventConsumer(event_name, subclass_name, len), true) {
  }

  public int bind(string event_name, string subclass_name) {
    int ret = NativePINVOKE.EventConsumer_bind(swigCPtr, event_name, subclass_name);
    return ret;
  }

  public Event pop(int block, int timeout) {
    global::System.IntPtr cPtr = NativePINVOKE.EventConsumer_pop(swigCPtr, block, timeout);
    Event ret = (cPtr == global::System.IntPtr.Zero) ? null : new Event(cPtr, true);
    return ret;
  }

  public void cleanup() {
    NativePINVOKE.EventConsumer_cleanup(swigCPtr);
  }

}

}
namespace FreeSWITCH {

public class CoreSession : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal CoreSession(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CoreSession obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~CoreSession() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_CoreSession(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_switch_core_session_t InternalSession {
    set {
      NativePINVOKE.CoreSession_InternalSession_set(swigCPtr, SWIGTYPE_p_switch_core_session_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.CoreSession_InternalSession_get(swigCPtr);
      SWIGTYPE_p_switch_core_session_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_switch_core_session_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_switch_channel_t channel {
    set {
      NativePINVOKE.CoreSession_channel_set(swigCPtr, SWIGTYPE_p_switch_channel_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.CoreSession_channel_get(swigCPtr);
      SWIGTYPE_p_switch_channel_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_switch_channel_t(cPtr, false);
      return ret;
    } 
  }

  public uint flags {
    set {
      NativePINVOKE.CoreSession_flags_set(swigCPtr, value);
    } 
    get {
      uint ret = NativePINVOKE.CoreSession_flags_get(swigCPtr);
      return ret;
    } 
  }

  public int allocated {
    set {
      NativePINVOKE.CoreSession_allocated_set(swigCPtr, value);
    } 
    get {
      int ret = NativePINVOKE.CoreSession_allocated_get(swigCPtr);
      return ret;
    } 
  }

  public input_callback_state_t cb_state {
    set {
      NativePINVOKE.CoreSession_cb_state_set(swigCPtr, input_callback_state_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = NativePINVOKE.CoreSession_cb_state_get(swigCPtr);
      input_callback_state_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new input_callback_state_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_switch_channel_state_t HookState {
    set {
      NativePINVOKE.CoreSession_HookState_set(swigCPtr, SWIGTYPE_p_switch_channel_state_t.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_switch_channel_state_t ret = new SWIGTYPE_p_switch_channel_state_t(NativePINVOKE.CoreSession_HookState_get(swigCPtr), true);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_switch_call_cause_t cause {
    set {
      NativePINVOKE.CoreSession_cause_set(swigCPtr, SWIGTYPE_p_switch_call_cause_t.getCPtr(value));
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_switch_call_cause_t ret = new SWIGTYPE_p_switch_call_cause_t(NativePINVOKE.CoreSession_cause_get(swigCPtr), true);
      if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string uuid {
    set {
      NativePINVOKE.CoreSession_uuid_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.CoreSession_uuid_get(swigCPtr);
      return ret;
    } 
  }

  public string tts_name {
    set {
      NativePINVOKE.CoreSession_tts_name_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.CoreSession_tts_name_get(swigCPtr);
      return ret;
    } 
  }

  public string voice_name {
    set {
      NativePINVOKE.CoreSession_voice_name_set(swigCPtr, value);
    } 
    get {
      string ret = NativePINVOKE.CoreSession_voice_name_get(swigCPtr);
      return ret;
    } 
  }

  public int insertFile(string file, string insert_file, int sample_point) {
    int ret = NativePINVOKE.CoreSession_insertFile(swigCPtr, file, insert_file, sample_point);
    return ret;
  }

  public int Answer() {
    int ret = NativePINVOKE.CoreSession_Answer(swigCPtr);
    return ret;
  }

  public int print(string txt) {
    int ret = NativePINVOKE.CoreSession_print(swigCPtr, txt);
    return ret;
  }

  public int preAnswer() {
    int ret = NativePINVOKE.CoreSession_preAnswer(swigCPtr);
    return ret;
  }

  public void Hangup(string cause) {
    NativePINVOKE.CoreSession_Hangup(swigCPtr, cause);
  }

  public void hangupState() {
    NativePINVOKE.CoreSession_hangupState(swigCPtr);
  }

  public void SetVariable(string var, string val) {
    NativePINVOKE.CoreSession_SetVariable(swigCPtr, var, val);
  }

  public void SetPrivate(string var, SWIGTYPE_p_void val) {
    NativePINVOKE.CoreSession_SetPrivate(swigCPtr, var, SWIGTYPE_p_void.getCPtr(val));
  }

  public SWIGTYPE_p_void GetPrivate(string var) {
    global::System.IntPtr cPtr = NativePINVOKE.CoreSession_GetPrivate(swigCPtr, var);
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    return ret;
  }

  public string GetVariable(string var) {
    string ret = NativePINVOKE.CoreSession_GetVariable(swigCPtr, var);
    return ret;
  }

  public SWIGTYPE_p_switch_status_t process_callback_result(string result) {
    SWIGTYPE_p_switch_status_t ret = new SWIGTYPE_p_switch_status_t(NativePINVOKE.CoreSession_process_callback_result(swigCPtr, result), true);
    return ret;
  }

  public void Say(string tosay, string module_name, string say_type, string say_method, string say_gender) {
    NativePINVOKE.CoreSession_Say(swigCPtr, tosay, module_name, say_type, say_method, say_gender);
  }

  public void SayPhrase(string phrase_name, string phrase_data, string phrase_lang) {
    NativePINVOKE.CoreSession_SayPhrase(swigCPtr, phrase_name, phrase_data, phrase_lang);
  }

  public string hangupCause() {
    string ret = NativePINVOKE.CoreSession_hangupCause(swigCPtr);
    return ret;
  }

  public string getState() {
    string ret = NativePINVOKE.CoreSession_getState(swigCPtr);
    return ret;
  }

  public int RecordFile(string file_name, int time_limit, int silence_threshold, int silence_hits) {
    int ret = NativePINVOKE.CoreSession_RecordFile(swigCPtr, file_name, time_limit, silence_threshold, silence_hits);
    return ret;
  }

  protected int originate(CoreSession a_leg_session, string dest, int timeout, SWIGTYPE_p_switch_state_handler_table_t handlers) {
    int ret = NativePINVOKE.CoreSession_originate(swigCPtr, CoreSession.getCPtr(a_leg_session), dest, timeout, SWIGTYPE_p_switch_state_handler_table_t.getCPtr(handlers));
    return ret;
  }

  public virtual void destroy() {
    NativePINVOKE.CoreSession_destroy(swigCPtr);
  }

  public void setDTMFCallback(SWIGTYPE_p_void cbfunc, string funcargs) {
    NativePINVOKE.CoreSession_setDTMFCallback(swigCPtr, SWIGTYPE_p_void.getCPtr(cbfunc), funcargs);
  }

  public int Speak(string text) {
    int ret = NativePINVOKE.CoreSession_Speak(swigCPtr, text);
    return ret;
  }

  public void SetTtsParameters(string tts_name, string voice_name) {
    NativePINVOKE.CoreSession_SetTtsParameters(swigCPtr, tts_name, voice_name);
  }

  public void set_tts_params(string tts_name, string voice_name) {
    NativePINVOKE.CoreSession_set_tts_params(swigCPtr, tts_name, voice_name);
  }

  public int CollectDigits(int abs_timeout) {
    int ret = NativePINVOKE.CoreSession_CollectDigits__SWIG_0(swigCPtr, abs_timeout);
    return ret;
  }

  public int CollectDigits(int digit_timeout, int abs_timeout) {
    int ret = NativePINVOKE.CoreSession_CollectDigits__SWIG_1(swigCPtr, digit_timeout, abs_timeout);
    return ret;
  }

  public string GetDigits(int maxdigits, string terminators, int timeout) {
    string ret = NativePINVOKE.CoreSession_GetDigits__SWIG_0(swigCPtr, maxdigits, terminators, timeout);
    return ret;
  }

  public string GetDigits(int maxdigits, string terminators, int timeout, int interdigit) {
    string ret = NativePINVOKE.CoreSession_GetDigits__SWIG_1(swigCPtr, maxdigits, terminators, timeout, interdigit);
    return ret;
  }

  public string GetDigits(int maxdigits, string terminators, int timeout, int interdigit, int abstimeout) {
    string ret = NativePINVOKE.CoreSession_GetDigits__SWIG_2(swigCPtr, maxdigits, terminators, timeout, interdigit, abstimeout);
    return ret;
  }

  public int Transfer(string extension, string dialplan, string context) {
    int ret = NativePINVOKE.CoreSession_Transfer(swigCPtr, extension, dialplan, context);
    return ret;
  }

  public string read(int min_digits, int max_digits, string prompt_audio_file, int timeout, string valid_terminators, int digit_timeout) {
    string ret = NativePINVOKE.CoreSession_read(swigCPtr, min_digits, max_digits, prompt_audio_file, timeout, valid_terminators, digit_timeout);
    return ret;
  }

  public void detectSpeech(string arg0, string arg1, string arg2, string arg3) {
    NativePINVOKE.CoreSession_detectSpeech(swigCPtr, arg0, arg1, arg2, arg3);
  }

  public string PlayAndGetDigits(int min_digits, int max_digits, int max_tries, int timeout, string terminators, string audio_files, string bad_input_audio_files, string digits_regex, string var_name, int digit_timeout, string transfer_on_failure) {
    string ret = NativePINVOKE.CoreSession_PlayAndGetDigits(swigCPtr, min_digits, max_digits, max_tries, timeout, terminators, audio_files, bad_input_audio_files, digits_regex, var_name, digit_timeout, transfer_on_failure);
    return ret;
  }

  public string playAndDetectSpeech(string file, string engine, string grammar) {
    string ret = NativePINVOKE.CoreSession_playAndDetectSpeech(swigCPtr, file, engine, grammar);
    return ret;
  }

  public int StreamFile(string file, int starting_sample_count) {
    int ret = NativePINVOKE.CoreSession_StreamFile(swigCPtr, file, starting_sample_count);
    return ret;
  }

  public int sleep(int ms, int sync) {
    int ret = NativePINVOKE.CoreSession_sleep(swigCPtr, ms, sync);
    return ret;
  }

  public int flushEvents() {
    int ret = NativePINVOKE.CoreSession_flushEvents(swigCPtr);
    return ret;
  }

  public int flushDigits() {
    int ret = NativePINVOKE.CoreSession_flushDigits(swigCPtr);
    return ret;
  }

  public int SetAutoHangup(bool val) {
    int ret = NativePINVOKE.CoreSession_SetAutoHangup(swigCPtr, val);
    return ret;
  }

  public void setHangupHook(SWIGTYPE_p_void hangup_func) {
    NativePINVOKE.CoreSession_setHangupHook(swigCPtr, SWIGTYPE_p_void.getCPtr(hangup_func));
  }

  public bool Ready() {
    bool ret = NativePINVOKE.CoreSession_Ready(swigCPtr);
    return ret;
  }

  public bool bridged() {
    bool ret = NativePINVOKE.CoreSession_bridged(swigCPtr);
    return ret;
  }

  public bool answered() {
    bool ret = NativePINVOKE.CoreSession_answered(swigCPtr);
    return ret;
  }

  public bool mediaReady() {
    bool ret = NativePINVOKE.CoreSession_mediaReady(swigCPtr);
    return ret;
  }

  public void waitForAnswer(CoreSession calling_session) {
    NativePINVOKE.CoreSession_waitForAnswer(swigCPtr, CoreSession.getCPtr(calling_session));
  }

  public void Execute(string app, string data) {
    NativePINVOKE.CoreSession_Execute(swigCPtr, app, data);
  }

  public void sendEvent(Event sendME) {
    NativePINVOKE.CoreSession_sendEvent(swigCPtr, Event.getCPtr(sendME));
  }

  public void setEventData(Event e) {
    NativePINVOKE.CoreSession_setEventData(swigCPtr, Event.getCPtr(e));
  }

  public string getXMLCDR() {
    string ret = NativePINVOKE.CoreSession_getXMLCDR(swigCPtr);
    return ret;
  }

  public virtual bool begin_allow_threads() {
    bool ret = NativePINVOKE.CoreSession_begin_allow_threads(swigCPtr);
    return ret;
  }

  public virtual bool end_allow_threads() {
    bool ret = NativePINVOKE.CoreSession_end_allow_threads(swigCPtr);
    return ret;
  }

  public string GetUuid() {
    string ret = NativePINVOKE.CoreSession_GetUuid(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_switch_input_args_t get_cb_args() {
    SWIGTYPE_p_switch_input_args_t ret = new SWIGTYPE_p_switch_input_args_t(NativePINVOKE.CoreSession_get_cb_args(swigCPtr), false);
    return ret;
  }

  public virtual void check_hangup_hook() {
    NativePINVOKE.CoreSession_check_hangup_hook(swigCPtr);
  }

  public virtual SWIGTYPE_p_switch_status_t run_dtmf_callback(SWIGTYPE_p_void input, SWIGTYPE_p_switch_input_type_t itype) {
    SWIGTYPE_p_switch_status_t ret = new SWIGTYPE_p_switch_status_t(NativePINVOKE.CoreSession_run_dtmf_callback(swigCPtr, SWIGTYPE_p_void.getCPtr(input), SWIGTYPE_p_switch_input_type_t.getCPtr(itype)), true);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void consoleLog(string level_str, string msg) {
    NativePINVOKE.CoreSession_consoleLog(swigCPtr, level_str, msg);
  }

  public void consoleLog2(string level_str, string file, string func, int line, string msg) {
    NativePINVOKE.CoreSession_consoleLog2(swigCPtr, level_str, file, func, line, msg);
  }

}

}
namespace FreeSWITCH {

public partial class ManagedSession : CoreSession {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ManagedSession(global::System.IntPtr cPtr, bool cMemoryOwn) : base(NativePINVOKE.ManagedSession_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ManagedSession obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          NativePINVOKE.delete_ManagedSession(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ManagedSession() : this(NativePINVOKE.new_ManagedSession__SWIG_0(), true) {
  }

  public ManagedSession(string uuid) : this(NativePINVOKE.new_ManagedSession__SWIG_1(uuid), true) {
  }

  public ManagedSession(SWIGTYPE_p_switch_core_session_t session) : this(NativePINVOKE.new_ManagedSession__SWIG_2(SWIGTYPE_p_switch_core_session_t.getCPtr(session)), true) {
  }

}

}
namespace FreeSWITCH {

class NativePINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="SWIGRegisterExceptionCallbacks_Native")]
    public static extern void SWIGRegisterExceptionCallbacks_Native(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_Native")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_Native(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new global::System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new global::System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new global::System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new global::System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new global::System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new global::System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new global::System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new global::System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new global::System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new global::System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new global::System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new global::System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      global::System.Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new global::System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_Native(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_Native(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [global::System.ThreadStatic]
    private static global::System.Exception pendingException = null;
    private static int numExceptionsPending = 0;
    private static global::System.Object exceptionsLock = null;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(global::System.Exception e) {
      if (pendingException != null)
        throw new global::System.ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(exceptionsLock) {
        numExceptionsPending++;
      }
    }

    public static global::System.Exception Retrieve() {
      global::System.Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(exceptionsLock) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }

    static SWIGPendingException() {
      exceptionsLock = new global::System.Object();
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="SWIGRegisterStringCallback_Native")]
    public static extern void SWIGRegisterStringCallback_Native(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_Native(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static NativePINVOKE() {
  }


  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_setGlobalVariable")]
  public static extern void setGlobalVariable(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_getGlobalVariable")]
  public static extern string getGlobalVariable(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_consoleLog")]
  public static extern void consoleLog(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_consoleLog2")]
  public static extern void consoleLog2(string jarg1, string jarg2, string jarg3, int jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_consoleCleanLog")]
  public static extern void consoleCleanLog(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_running")]
  public static extern bool running();

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_email")]
  public static extern bool email(string jarg1, string jarg2, string jarg3, string jarg4, string jarg5, string jarg6, string jarg7);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_IvrMenu")]
  public static extern global::System.IntPtr new_IvrMenu(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, string jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, string jarg11, int jarg12, int jarg13, int jarg14, int jarg15, int jarg16, int jarg17);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_IvrMenu")]
  public static extern void delete_IvrMenu(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_IvrMenu_bindAction")]
  public static extern void IvrMenu_bindAction(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_IvrMenu_Execute")]
  public static extern void IvrMenu_Execute(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_Api")]
  public static extern global::System.IntPtr new_Api(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_Api")]
  public static extern void delete_Api(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Api_Execute")]
  public static extern string Api_Execute(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Api_ExecuteString")]
  public static extern string Api_ExecuteString(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Api_getTime")]
  public static extern string Api_getTime(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_function_set")]
  public static extern void input_callback_state_t_function_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_function_get")]
  public static extern global::System.IntPtr input_callback_state_t_function_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_threadState_set")]
  public static extern void input_callback_state_t_threadState_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_threadState_get")]
  public static extern global::System.IntPtr input_callback_state_t_threadState_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_extra_set")]
  public static extern void input_callback_state_t_extra_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_extra_get")]
  public static extern global::System.IntPtr input_callback_state_t_extra_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_funcargs_set")]
  public static extern void input_callback_state_t_funcargs_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_input_callback_state_t_funcargs_get")]
  public static extern string input_callback_state_t_funcargs_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_input_callback_state_t")]
  public static extern global::System.IntPtr new_input_callback_state_t();

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_input_callback_state_t")]
  public static extern void delete_input_callback_state_t(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_DTMF_digit_set")]
  public static extern void DTMF_digit_set(global::System.Runtime.InteropServices.HandleRef jarg1, char jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_DTMF_digit_get")]
  public static extern char DTMF_digit_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_DTMF_duration_set")]
  public static extern void DTMF_duration_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_DTMF_duration_get")]
  public static extern global::System.IntPtr DTMF_duration_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_DTMF")]
  public static extern global::System.IntPtr new_DTMF(char jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_DTMF")]
  public static extern void delete_DTMF(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_Stream__SWIG_0")]
  public static extern global::System.IntPtr new_Stream__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_Stream__SWIG_1")]
  public static extern global::System.IntPtr new_Stream__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_Stream")]
  public static extern void delete_Stream(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Stream_read")]
  public static extern string Stream_read(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Stream_Write")]
  public static extern void Stream_Write(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Stream_raw_write")]
  public static extern void Stream_raw_write(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Stream_get_data")]
  public static extern string Stream_get_data(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_InternalEvent_set")]
  public static extern void Event_InternalEvent_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_InternalEvent_get")]
  public static extern global::System.IntPtr Event_InternalEvent_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_serialized_string_set")]
  public static extern void Event_serialized_string_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_serialized_string_get")]
  public static extern string Event_serialized_string_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_mine_set")]
  public static extern void Event_mine_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_mine_get")]
  public static extern int Event_mine_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_Event__SWIG_0")]
  public static extern global::System.IntPtr new_Event__SWIG_0(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_Event__SWIG_1")]
  public static extern global::System.IntPtr new_Event__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_Event")]
  public static extern void delete_Event(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_chat_execute")]
  public static extern int Event_chat_execute(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_chat_send")]
  public static extern int Event_chat_send(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_Serialize")]
  public static extern string Event_Serialize(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_SetPriority")]
  public static extern bool Event_SetPriority(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_GetHeader")]
  public static extern string Event_GetHeader(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_GetBody")]
  public static extern string Event_GetBody(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_GetEventType")]
  public static extern string Event_GetEventType(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_AddBody")]
  public static extern bool Event_AddBody(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_AddHeader")]
  public static extern bool Event_AddHeader(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_DeleteHeader")]
  public static extern bool Event_DeleteHeader(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_Event_Fire")]
  public static extern bool Event_Fire(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_events_set")]
  public static extern void EventConsumer_events_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_events_get")]
  public static extern global::System.IntPtr EventConsumer_events_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_event_id_set")]
  public static extern void EventConsumer_e_event_id_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_event_id_get")]
  public static extern global::System.IntPtr EventConsumer_e_event_id_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_callback_set")]
  public static extern void EventConsumer_e_callback_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_callback_get")]
  public static extern string EventConsumer_e_callback_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_subclass_name_set")]
  public static extern void EventConsumer_e_subclass_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_subclass_name_get")]
  public static extern string EventConsumer_e_subclass_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_cb_arg_set")]
  public static extern void EventConsumer_e_cb_arg_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_e_cb_arg_get")]
  public static extern string EventConsumer_e_cb_arg_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_enodes_set")]
  public static extern void EventConsumer_enodes_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_enodes_get")]
  public static extern global::System.IntPtr EventConsumer_enodes_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_node_index_set")]
  public static extern void EventConsumer_node_index_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_node_index_get")]
  public static extern global::System.IntPtr EventConsumer_node_index_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_EventConsumer")]
  public static extern global::System.IntPtr new_EventConsumer(string jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_EventConsumer")]
  public static extern void delete_EventConsumer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_bind")]
  public static extern int EventConsumer_bind(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_pop")]
  public static extern global::System.IntPtr EventConsumer_pop(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_EventConsumer_cleanup")]
  public static extern void EventConsumer_cleanup(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_CoreSession")]
  public static extern void delete_CoreSession(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_InternalSession_set")]
  public static extern void CoreSession_InternalSession_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_InternalSession_get")]
  public static extern global::System.IntPtr CoreSession_InternalSession_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_channel_set")]
  public static extern void CoreSession_channel_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_channel_get")]
  public static extern global::System.IntPtr CoreSession_channel_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_flags_set")]
  public static extern void CoreSession_flags_set(global::System.Runtime.InteropServices.HandleRef jarg1, uint jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_flags_get")]
  public static extern uint CoreSession_flags_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_allocated_set")]
  public static extern void CoreSession_allocated_set(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_allocated_get")]
  public static extern int CoreSession_allocated_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_cb_state_set")]
  public static extern void CoreSession_cb_state_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_cb_state_get")]
  public static extern global::System.IntPtr CoreSession_cb_state_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_HookState_set")]
  public static extern void CoreSession_HookState_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_HookState_get")]
  public static extern global::System.IntPtr CoreSession_HookState_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_cause_set")]
  public static extern void CoreSession_cause_set(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_cause_get")]
  public static extern global::System.IntPtr CoreSession_cause_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_uuid_set")]
  public static extern void CoreSession_uuid_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_uuid_get")]
  public static extern string CoreSession_uuid_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_tts_name_set")]
  public static extern void CoreSession_tts_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_tts_name_get")]
  public static extern string CoreSession_tts_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_voice_name_set")]
  public static extern void CoreSession_voice_name_set(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_voice_name_get")]
  public static extern string CoreSession_voice_name_get(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_insertFile")]
  public static extern int CoreSession_insertFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_Answer")]
  public static extern int CoreSession_Answer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_print")]
  public static extern int CoreSession_print(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_preAnswer")]
  public static extern int CoreSession_preAnswer(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_Hangup")]
  public static extern void CoreSession_Hangup(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_hangupState")]
  public static extern void CoreSession_hangupState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_SetVariable")]
  public static extern void CoreSession_SetVariable(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_SetPrivate")]
  public static extern void CoreSession_SetPrivate(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_GetPrivate")]
  public static extern global::System.IntPtr CoreSession_GetPrivate(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_GetVariable")]
  public static extern string CoreSession_GetVariable(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_process_callback_result")]
  public static extern global::System.IntPtr CoreSession_process_callback_result(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_Say")]
  public static extern void CoreSession_Say(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, string jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_SayPhrase")]
  public static extern void CoreSession_SayPhrase(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_hangupCause")]
  public static extern string CoreSession_hangupCause(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_getState")]
  public static extern string CoreSession_getState(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_RecordFile")]
  public static extern int CoreSession_RecordFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_originate")]
  public static extern int CoreSession_originate(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3, int jarg4, global::System.Runtime.InteropServices.HandleRef jarg5);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_destroy")]
  public static extern void CoreSession_destroy(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_setDTMFCallback")]
  public static extern void CoreSession_setDTMFCallback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_Speak")]
  public static extern int CoreSession_Speak(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_SetTtsParameters")]
  public static extern void CoreSession_SetTtsParameters(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_set_tts_params")]
  public static extern void CoreSession_set_tts_params(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_CollectDigits__SWIG_0")]
  public static extern int CoreSession_CollectDigits__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_CollectDigits__SWIG_1")]
  public static extern int CoreSession_CollectDigits__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_GetDigits__SWIG_0")]
  public static extern string CoreSession_GetDigits__SWIG_0(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_GetDigits__SWIG_1")]
  public static extern string CoreSession_GetDigits__SWIG_1(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4, int jarg5);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_GetDigits__SWIG_2")]
  public static extern string CoreSession_GetDigits__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, string jarg3, int jarg4, int jarg5, int jarg6);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_Transfer")]
  public static extern int CoreSession_Transfer(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_read")]
  public static extern string CoreSession_read(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, string jarg4, int jarg5, string jarg6, int jarg7);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_detectSpeech")]
  public static extern void CoreSession_detectSpeech(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_PlayAndGetDigits")]
  public static extern string CoreSession_PlayAndGetDigits(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3, int jarg4, int jarg5, string jarg6, string jarg7, string jarg8, string jarg9, string jarg10, int jarg11, string jarg12);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_playAndDetectSpeech")]
  public static extern string CoreSession_playAndDetectSpeech(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_StreamFile")]
  public static extern int CoreSession_StreamFile(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_sleep")]
  public static extern int CoreSession_sleep(global::System.Runtime.InteropServices.HandleRef jarg1, int jarg2, int jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_flushEvents")]
  public static extern int CoreSession_flushEvents(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_flushDigits")]
  public static extern int CoreSession_flushDigits(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_SetAutoHangup")]
  public static extern int CoreSession_SetAutoHangup(global::System.Runtime.InteropServices.HandleRef jarg1, bool jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_setHangupHook")]
  public static extern void CoreSession_setHangupHook(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_Ready")]
  public static extern bool CoreSession_Ready(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_bridged")]
  public static extern bool CoreSession_bridged(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_answered")]
  public static extern bool CoreSession_answered(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_mediaReady")]
  public static extern bool CoreSession_mediaReady(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_waitForAnswer")]
  public static extern void CoreSession_waitForAnswer(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_Execute")]
  public static extern void CoreSession_Execute(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_sendEvent")]
  public static extern void CoreSession_sendEvent(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_setEventData")]
  public static extern void CoreSession_setEventData(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_getXMLCDR")]
  public static extern string CoreSession_getXMLCDR(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_begin_allow_threads")]
  public static extern bool CoreSession_begin_allow_threads(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_end_allow_threads")]
  public static extern bool CoreSession_end_allow_threads(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_GetUuid")]
  public static extern string CoreSession_GetUuid(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_get_cb_args")]
  public static extern global::System.IntPtr CoreSession_get_cb_args(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_check_hangup_hook")]
  public static extern void CoreSession_check_hangup_hook(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_run_dtmf_callback")]
  public static extern global::System.IntPtr CoreSession_run_dtmf_callback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_consoleLog")]
  public static extern void CoreSession_consoleLog(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_CoreSession_consoleLog2")]
  public static extern void CoreSession_consoleLog2(global::System.Runtime.InteropServices.HandleRef jarg1, string jarg2, string jarg3, string jarg4, int jarg5, string jarg6);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_console_log")]
  public static extern void console_log(string jarg1, string jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_console_log2")]
  public static extern void console_log2(string jarg1, string jarg2, string jarg3, int jarg4, string jarg5);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_console_clean_log")]
  public static extern void console_clean_log(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_switch_msleep")]
  public static extern void switch_msleep(uint jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_bridge")]
  public static extern void bridge(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_hanguphook")]
  public static extern global::System.IntPtr hanguphook(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_dtmf_callback")]
  public static extern global::System.IntPtr dtmf_callback(global::System.Runtime.InteropServices.HandleRef jarg1, global::System.Runtime.InteropServices.HandleRef jarg2, global::System.Runtime.InteropServices.HandleRef jarg3, global::System.Runtime.InteropServices.HandleRef jarg4, uint jarg5);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_ManagedSession__SWIG_0")]
  public static extern global::System.IntPtr new_ManagedSession__SWIG_0();

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_ManagedSession__SWIG_1")]
  public static extern global::System.IntPtr new_ManagedSession__SWIG_1(string jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_new_ManagedSession__SWIG_2")]
  public static extern global::System.IntPtr new_ManagedSession__SWIG_2(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_delete_ManagedSession")]
  public static extern void delete_ManagedSession(global::System.Runtime.InteropServices.HandleRef jarg1);

  [global::System.Runtime.InteropServices.DllImport("mod_coreclr", EntryPoint="CSharp_FreeSWITCH_ManagedSession_SWIGUpcast")]
  public static extern global::System.IntPtr ManagedSession_SWIGUpcast(global::System.IntPtr jarg1);
}

}
namespace FreeSWITCH {

public class Native {
  public static void setGlobalVariable(string var_name, string var_val) {
    NativePINVOKE.setGlobalVariable(var_name, var_val);
  }

  public static string getGlobalVariable(string var_name) {
    string ret = NativePINVOKE.getGlobalVariable(var_name);
    return ret;
  }

  public static void consoleLog(string level_str, string msg) {
    NativePINVOKE.consoleLog(level_str, msg);
  }

  public static void consoleLog2(string level_str, string file, string func, int line, string msg) {
    NativePINVOKE.consoleLog2(level_str, file, func, line, msg);
  }

  public static void consoleCleanLog(string msg) {
    NativePINVOKE.consoleCleanLog(msg);
  }

  public static bool running() {
    bool ret = NativePINVOKE.running();
    return ret;
  }

  public static bool email(string to, string from, string headers, string body, string file, string convert_cmd, string convert_ext) {
    bool ret = NativePINVOKE.email(to, from, headers, body, file, convert_cmd, convert_ext);
    return ret;
  }

  public static void console_log(string level_str, string msg) {
    NativePINVOKE.console_log(level_str, msg);
  }

  public static void console_log2(string level_str, string file, string func, int line, string msg) {
    NativePINVOKE.console_log2(level_str, file, func, line, msg);
  }

  public static void console_clean_log(string msg) {
    NativePINVOKE.console_clean_log(msg);
  }

  public static void switch_msleep(uint ms) {
    NativePINVOKE.switch_msleep(ms);
  }

  public static void bridge(CoreSession session_a, CoreSession session_b) {
    NativePINVOKE.bridge(CoreSession.getCPtr(session_a), CoreSession.getCPtr(session_b));
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
  }

  public static SWIGTYPE_p_switch_status_t hanguphook(SWIGTYPE_p_switch_core_session_t session) {
    SWIGTYPE_p_switch_status_t ret = new SWIGTYPE_p_switch_status_t(NativePINVOKE.hanguphook(SWIGTYPE_p_switch_core_session_t.getCPtr(session)), true);
    return ret;
  }

  public static SWIGTYPE_p_switch_status_t dtmf_callback(SWIGTYPE_p_switch_core_session_t session, SWIGTYPE_p_void input, SWIGTYPE_p_switch_input_type_t itype, SWIGTYPE_p_void buf, uint buflen) {
    SWIGTYPE_p_switch_status_t ret = new SWIGTYPE_p_switch_status_t(NativePINVOKE.dtmf_callback(SWIGTYPE_p_switch_core_session_t.getCPtr(session), SWIGTYPE_p_void.getCPtr(input), SWIGTYPE_p_switch_input_type_t.getCPtr(itype), SWIGTYPE_p_void.getCPtr(buf), buflen), true);
    if (NativePINVOKE.SWIGPendingException.Pending) throw NativePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_int {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_int(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_int() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_int obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_uint32_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_uint32_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_uint32_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_uint32_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_event_types_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_event_types_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_event_types_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_event_types_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_core_session_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public  SWIGTYPE_p_switch_core_session_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_core_session_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_core_session_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_stream_handle_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public  SWIGTYPE_p_switch_stream_handle_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_stream_handle_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_stream_handle_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_void {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_void(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_void() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_void obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_channel_state_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_channel_state_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_channel_state_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_channel_state_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_p_switch_event_node_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_p_switch_event_node_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_p_switch_event_node_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_p_switch_event_node_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_priority_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_priority_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_priority_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_priority_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_call_cause_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_call_cause_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_call_cause_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_call_cause_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_input_args_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_input_args_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_input_args_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_input_args_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_status_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_status_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_status_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_status_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_channel_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_channel_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_channel_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_channel_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_state_handler_table_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_state_handler_table_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_state_handler_table_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_state_handler_table_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_event_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  public SWIGTYPE_p_switch_event_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_event_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_event_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_queue_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_queue_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_queue_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_queue_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
namespace FreeSWITCH {

public class SWIGTYPE_p_switch_input_type_t {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal SWIGTYPE_p_switch_input_type_t(global::System.IntPtr cPtr, bool futureUse) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  protected SWIGTYPE_p_switch_input_type_t() {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SWIGTYPE_p_switch_input_type_t obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }
}

}
