/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Native(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Native(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Native(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


#include "switch.h"
#include "switch_cpp.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_setGlobalVariable(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  setGlobalVariable(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_getGlobalVariable(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)getGlobalVariable(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_consoleLog(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  consoleLog(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_consoleLog2(char * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  consoleLog2(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_consoleCleanLog(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  consoleCleanLog(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_running() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)running();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_email(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  char *arg4 = (char *) NULL ;
  char *arg5 = (char *) NULL ;
  char *arg6 = (char *) NULL ;
  char *arg7 = (char *) NULL ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)email(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_IvrMenu(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, char * jarg11, int jarg12, int jarg13, int jarg14, int jarg15, int jarg16, int jarg17) {
  void * jresult ;
  IVRMenu *arg1 = (IVRMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  int arg12 ;
  int arg13 ;
  int arg14 ;
  int arg15 ;
  int arg16 ;
  int arg17 ;
  IVRMenu *result = 0 ;
  
  arg1 = (IVRMenu *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (char *)jarg11; 
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  arg14 = (int)jarg14; 
  arg15 = (int)jarg15; 
  arg16 = (int)jarg16; 
  arg17 = (int)jarg17; 
  result = (IVRMenu *)new IVRMenu(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,(char const *)arg9,(char const *)arg10,(char const *)arg11,arg12,arg13,arg14,arg15,arg16,arg17);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_IvrMenu(void * jarg1) {
  IVRMenu *arg1 = (IVRMenu *) 0 ;
  
  arg1 = (IVRMenu *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_IvrMenu_bindAction(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  IVRMenu *arg1 = (IVRMenu *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (IVRMenu *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->bindAction(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_IvrMenu_Execute(void * jarg1, void * jarg2, char * jarg3) {
  IVRMenu *arg1 = (IVRMenu *) 0 ;
  CoreSession *arg2 = (CoreSession *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (IVRMenu *)jarg1; 
  arg2 = (CoreSession *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->execute(arg2,(char const *)arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_Api(void * jarg1) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) NULL ;
  API *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (API *)new API(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_Api(void * jarg1) {
  API *arg1 = (API *) 0 ;
  
  arg1 = (API *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Api_Execute(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  API *arg1 = (API *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  char *result = 0 ;
  
  arg1 = (API *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (char *)(arg1)->execute((char const *)arg2,(char const *)arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Api_ExecuteString(void * jarg1, char * jarg2) {
  char * jresult ;
  API *arg1 = (API *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (API *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->executeString((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Api_getTime(void * jarg1) {
  char * jresult ;
  API *arg1 = (API *) 0 ;
  char *result = 0 ;
  
  arg1 = (API *)jarg1; 
  result = (char *)(arg1)->getTime();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_function_set(void * jarg1, void * jarg2) {
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->function = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_function_get(void * jarg1) {
  void * jresult ;
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  void *result = 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  result = (void *) ((arg1)->function);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_threadState_set(void * jarg1, void * jarg2) {
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->threadState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_threadState_get(void * jarg1) {
  void * jresult ;
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  void *result = 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  result = (void *) ((arg1)->threadState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_extra_set(void * jarg1, void * jarg2) {
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->extra = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_extra_get(void * jarg1) {
  void * jresult ;
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  void *result = 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  result = (void *) ((arg1)->extra);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_funcargs_set(void * jarg1, char * jarg2) {
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->funcargs;
    if (arg2) {
      arg1->funcargs = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->funcargs, (const char *)arg2);
    } else {
      arg1->funcargs = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_input_callback_state_t_funcargs_get(void * jarg1) {
  char * jresult ;
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  char *result = 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  result = (char *) ((arg1)->funcargs);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_input_callback_state_t() {
  void * jresult ;
  input_callback_state *result = 0 ;
  
  result = (input_callback_state *)new input_callback_state();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_input_callback_state_t(void * jarg1) {
  input_callback_state *arg1 = (input_callback_state *) 0 ;
  
  arg1 = (input_callback_state *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_DTMF_digit_set(void * jarg1, char jarg2) {
  DTMF *arg1 = (DTMF *) 0 ;
  char arg2 ;
  
  arg1 = (DTMF *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->digit = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_FreeSWITCH_DTMF_digit_get(void * jarg1) {
  char jresult ;
  DTMF *arg1 = (DTMF *) 0 ;
  char result;
  
  arg1 = (DTMF *)jarg1; 
  result = (char) ((arg1)->digit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_DTMF_duration_set(void * jarg1, void * jarg2) {
  DTMF *arg1 = (DTMF *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (DTMF *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_DTMF_duration_get(void * jarg1) {
  void * jresult ;
  DTMF *arg1 = (DTMF *) 0 ;
  uint32_t result;
  
  arg1 = (DTMF *)jarg1; 
  result =  ((arg1)->duration);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_DTMF(char jarg1, void * jarg2) {
  void * jresult ;
  char arg1 ;
  uint32_t arg2 = (uint32_t) SWITCH_DEFAULT_DTMF_DURATION ;
  uint32_t *argp2 ;
  DTMF *result = 0 ;
  
  arg1 = (char)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (DTMF *)new DTMF(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_DTMF(void * jarg1) {
  DTMF *arg1 = (DTMF *) 0 ;
  
  arg1 = (DTMF *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_Stream__SWIG_0() {
  void * jresult ;
  Stream *result = 0 ;
  
  result = (Stream *)new Stream();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_Stream__SWIG_1(void * jarg1) {
  void * jresult ;
  switch_stream_handle_t *arg1 = (switch_stream_handle_t *) 0 ;
  Stream *result = 0 ;
  
  arg1 = (switch_stream_handle_t *)jarg1; 
  result = (Stream *)new Stream(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_Stream(void * jarg1) {
  Stream *arg1 = (Stream *) 0 ;
  
  arg1 = (Stream *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Stream_read(void * jarg1, void * jarg2) {
  char * jresult ;
  Stream *arg1 = (Stream *) 0 ;
  int *arg2 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = (Stream *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (char *)(arg1)->read(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_Stream_Write(void * jarg1, char * jarg2) {
  Stream *arg1 = (Stream *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Stream *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->write((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_Stream_raw_write(void * jarg1, char * jarg2, int jarg3) {
  Stream *arg1 = (Stream *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (Stream *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->raw_write((char const *)arg2,arg3);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Stream_get_data(void * jarg1) {
  char * jresult ;
  Stream *arg1 = (Stream *) 0 ;
  char *result = 0 ;
  
  arg1 = (Stream *)jarg1; 
  result = (char *)(arg1)->get_data();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_Event_InternalEvent_set(void * jarg1, void * jarg2) {
  Event *arg1 = (Event *) 0 ;
  switch_event_t *arg2 = (switch_event_t *) 0 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (switch_event_t *)jarg2; 
  if (arg1) (arg1)->event = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_Event_InternalEvent_get(void * jarg1) {
  void * jresult ;
  Event *arg1 = (Event *) 0 ;
  switch_event_t *result = 0 ;
  
  arg1 = (Event *)jarg1; 
  result = (switch_event_t *) ((arg1)->event);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_Event_serialized_string_set(void * jarg1, char * jarg2) {
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->serialized_string;
    if (arg2) {
      arg1->serialized_string = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->serialized_string, (const char *)arg2);
    } else {
      arg1->serialized_string = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Event_serialized_string_get(void * jarg1) {
  char * jresult ;
  Event *arg1 = (Event *) 0 ;
  char *result = 0 ;
  
  arg1 = (Event *)jarg1; 
  result = (char *) ((arg1)->serialized_string);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_Event_mine_set(void * jarg1, int jarg2) {
  Event *arg1 = (Event *) 0 ;
  int arg2 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mine = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_Event_mine_get(void * jarg1) {
  int jresult ;
  Event *arg1 = (Event *) 0 ;
  int result;
  
  arg1 = (Event *)jarg1; 
  result = (int) ((arg1)->mine);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_Event__SWIG_0(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) NULL ;
  Event *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (Event *)new Event((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_Event__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  switch_event_t *arg1 = (switch_event_t *) 0 ;
  int arg2 = (int) 0 ;
  Event *result = 0 ;
  
  arg1 = (switch_event_t *)jarg1; 
  arg2 = (int)jarg2; 
  result = (Event *)new Event(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_Event(void * jarg1) {
  Event *arg1 = (Event *) 0 ;
  
  arg1 = (Event *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_Event_chat_execute(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  int result;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->chat_execute((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_Event_chat_send(void * jarg1, char * jarg2) {
  int jresult ;
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) NULL ;
  int result;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->chat_send((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Event_Serialize(void * jarg1, char * jarg2) {
  char * jresult ;
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) NULL ;
  char *result = 0 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->serialize((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_Event_SetPriority(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  Event *arg1 = (Event *) 0 ;
  switch_priority_t arg2 = (switch_priority_t) SWITCH_PRIORITY_NORMAL ;
  switch_priority_t *argp2 ;
  bool result;
  
  arg1 = (Event *)jarg1; 
  argp2 = (switch_priority_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null switch_priority_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setPriority(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Event_GetHeader(void * jarg1, char * jarg2) {
  char * jresult ;
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getHeader((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Event_GetBody(void * jarg1) {
  char * jresult ;
  Event *arg1 = (Event *) 0 ;
  char *result = 0 ;
  
  arg1 = (Event *)jarg1; 
  result = (char *)(arg1)->getBody();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_Event_GetEventType(void * jarg1) {
  char * jresult ;
  Event *arg1 = (Event *) 0 ;
  char *result = 0 ;
  
  arg1 = (Event *)jarg1; 
  result = (char *)(arg1)->getType();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_Event_AddBody(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addBody((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_Event_AddHeader(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addHeader((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_Event_DeleteHeader(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  Event *arg1 = (Event *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (Event *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->delHeader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_Event_Fire(void * jarg1) {
  unsigned int jresult ;
  Event *arg1 = (Event *) 0 ;
  bool result;
  
  arg1 = (Event *)jarg1; 
  result = (bool)(arg1)->fire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_events_set(void * jarg1, void * jarg2) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  switch_queue_t *arg2 = (switch_queue_t *) 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  arg2 = (switch_queue_t *)jarg2; 
  if (arg1) (arg1)->events = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_events_get(void * jarg1) {
  void * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  switch_queue_t *result = 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  result = (switch_queue_t *) ((arg1)->events);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_event_id_set(void * jarg1, void * jarg2) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  switch_event_types_t arg2 ;
  switch_event_types_t *argp2 ;
  
  arg1 = (EventConsumer *)jarg1; 
  argp2 = (switch_event_types_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null switch_event_types_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->e_event_id = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_event_id_get(void * jarg1) {
  void * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  switch_event_types_t result;
  
  arg1 = (EventConsumer *)jarg1; 
  result =  ((arg1)->e_event_id);
  jresult = new switch_event_types_t((const switch_event_types_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_callback_set(void * jarg1, char * jarg2) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->e_callback;
    if (arg2) {
      arg1->e_callback = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->e_callback, (const char *)arg2);
    } else {
      arg1->e_callback = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_callback_get(void * jarg1) {
  char * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  char *result = 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  result = (char *) ((arg1)->e_callback);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_subclass_name_set(void * jarg1, char * jarg2) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->e_subclass_name;
    if (arg2) {
      arg1->e_subclass_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->e_subclass_name, (const char *)arg2);
    } else {
      arg1->e_subclass_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_subclass_name_get(void * jarg1) {
  char * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  char *result = 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  result = (char *) ((arg1)->e_subclass_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_cb_arg_set(void * jarg1, char * jarg2) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->e_cb_arg;
    if (arg2) {
      arg1->e_cb_arg = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->e_cb_arg, (const char *)arg2);
    } else {
      arg1->e_cb_arg = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_e_cb_arg_get(void * jarg1) {
  char * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  char *result = 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  result = (char *) ((arg1)->e_cb_arg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_enodes_set(void * jarg1, void * jarg2) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  switch_event_node_t **arg2 ;
  
  arg1 = (EventConsumer *)jarg1; 
  arg2 = (switch_event_node_t **)jarg2; 
  {
    size_t ii;
    switch_event_node_t * *b = (switch_event_node_t * *) arg1->enodes;
    for (ii = 0; ii < (size_t)SWITCH_EVENT_ALL+1; ii++) b[ii] = *((switch_event_node_t * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_enodes_get(void * jarg1) {
  void * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  switch_event_node_t **result = 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  result = (switch_event_node_t **)(switch_event_node_t **) ((arg1)->enodes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_node_index_set(void * jarg1, void * jarg2) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  uint32_t arg2 ;
  uint32_t *argp2 ;
  
  arg1 = (EventConsumer *)jarg1; 
  argp2 = (uint32_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint32_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->node_index = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_node_index_get(void * jarg1) {
  void * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  uint32_t result;
  
  arg1 = (EventConsumer *)jarg1; 
  result =  ((arg1)->node_index);
  jresult = new uint32_t((const uint32_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_new_EventConsumer(char * jarg1, char * jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) NULL ;
  char *arg2 = (char *) "" ;
  int arg3 = (int) 5000 ;
  EventConsumer *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (EventConsumer *)new EventConsumer((char const *)arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_EventConsumer(void * jarg1) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_bind(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  int result;
  
  arg1 = (EventConsumer *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (int)(arg1)->bind((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_pop(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) 0 ;
  Event *result = 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (Event *)(arg1)->pop(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_EventConsumer_cleanup(void * jarg1) {
  EventConsumer *arg1 = (EventConsumer *) 0 ;
  
  arg1 = (EventConsumer *)jarg1; 
  (arg1)->cleanup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_delete_CoreSession(void * jarg1) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_InternalSession_set(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_core_session_t *arg2 = (switch_core_session_t *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (switch_core_session_t *)jarg2; 
  if (arg1) (arg1)->session = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_InternalSession_get(void * jarg1) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_core_session_t *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (switch_core_session_t *) ((arg1)->session);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_channel_set(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_channel_t *arg2 = (switch_channel_t *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (switch_channel_t *)jarg2; 
  if (arg1) (arg1)->channel = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_channel_get(void * jarg1) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_channel_t *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (switch_channel_t *) ((arg1)->channel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_flags_set(void * jarg1, unsigned int jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_flags_get(void * jarg1) {
  unsigned int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  unsigned int result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_allocated_set(void * jarg1, int jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->allocated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_allocated_get(void * jarg1) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (int) ((arg1)->allocated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_cb_state_set(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  input_callback_state *arg2 = (input_callback_state *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (input_callback_state *)jarg2; 
  if (arg1) (arg1)->cb_state = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_cb_state_get(void * jarg1) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  input_callback_state *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (input_callback_state *)& ((arg1)->cb_state);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_HookState_set(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_channel_state_t arg2 ;
  switch_channel_state_t *argp2 ;
  
  arg1 = (CoreSession *)jarg1; 
  argp2 = (switch_channel_state_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null switch_channel_state_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->hook_state = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_HookState_get(void * jarg1) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_channel_state_t result;
  
  arg1 = (CoreSession *)jarg1; 
  result =  ((arg1)->hook_state);
  jresult = new switch_channel_state_t((const switch_channel_state_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_cause_set(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_call_cause_t arg2 ;
  switch_call_cause_t *argp2 ;
  
  arg1 = (CoreSession *)jarg1; 
  argp2 = (switch_call_cause_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null switch_call_cause_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->cause = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_cause_get(void * jarg1) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_call_cause_t result;
  
  arg1 = (CoreSession *)jarg1; 
  result =  ((arg1)->cause);
  jresult = new switch_call_cause_t((const switch_call_cause_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_uuid_set(void * jarg1, char * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->uuid;
    if (arg2) {
      arg1->uuid = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->uuid, (const char *)arg2);
    } else {
      arg1->uuid = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_uuid_get(void * jarg1) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (char *) ((arg1)->uuid);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_tts_name_set(void * jarg1, char * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->tts_name;
    if (arg2) {
      arg1->tts_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->tts_name, (const char *)arg2);
    } else {
      arg1->tts_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_tts_name_get(void * jarg1) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (char *) ((arg1)->tts_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_voice_name_set(void * jarg1, char * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->voice_name;
    if (arg2) {
      arg1->voice_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->voice_name, (const char *)arg2);
    } else {
      arg1->voice_name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_voice_name_get(void * jarg1) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (char *) ((arg1)->voice_name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_insertFile(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->insertFile((char const *)arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_Answer(void * jarg1) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (int)(arg1)->answer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_print(void * jarg1, char * jarg2) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->print(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_preAnswer(void * jarg1) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (int)(arg1)->preAnswer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_Hangup(void * jarg1, char * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) "normal_clearing" ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->hangup((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_hangupState(void * jarg1) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  (arg1)->hangupState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_SetVariable(void * jarg1, char * jarg2, char * jarg3) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setVariable(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_SetPrivate(void * jarg1, char * jarg2, void * jarg3) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->setPrivate(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_GetPrivate(void * jarg1, char * jarg2) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (void *)(arg1)->getPrivate(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_GetVariable(void * jarg1, char * jarg2) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getVariable(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_process_callback_result(void * jarg1, char * jarg2) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  switch_status_t result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->process_callback_result(arg2);
  jresult = new switch_status_t((const switch_status_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_Say(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) NULL ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->say((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_SayPhrase(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) "" ;
  char *arg4 = (char *) NULL ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->sayPhrase((char const *)arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_hangupCause(void * jarg1) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (char *)(arg1)->hangupCause();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_getState(void * jarg1) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (char *)(arg1)->getState();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_RecordFile(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 0 ;
  int arg4 = (int) 0 ;
  int arg5 = (int) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->recordFile(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_originate(void * jarg1, void * jarg2, char * jarg3, int jarg4, void * jarg5) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  CoreSession *arg2 = (CoreSession *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 = (int) 60 ;
  switch_state_handler_table_t *arg5 = (switch_state_handler_table_t *) NULL ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (CoreSession *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (switch_state_handler_table_t *)jarg5; 
  result = (int)(arg1)->originate(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_destroy(void * jarg1) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_setDTMFCallback(void * jarg1, void * jarg2, char * jarg3) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  void *arg2 = (void *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->setDTMFCallback(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_Speak(void * jarg1, char * jarg2) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->speak(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_SetTtsParameters(void * jarg1, char * jarg2, char * jarg3) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->set_tts_parms(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_set_tts_params(void * jarg1, char * jarg2, char * jarg3) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->set_tts_params(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_CollectDigits__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->collectDigits(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_CollectDigits__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->collectDigits(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_GetDigits__SWIG_0(void * jarg1, int jarg2, char * jarg3, int jarg4) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (char *)(arg1)->getDigits(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_GetDigits__SWIG_1(void * jarg1, int jarg2, char * jarg3, int jarg4, int jarg5) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (char *)(arg1)->getDigits(arg2,arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_GetDigits__SWIG_2(void * jarg1, int jarg2, char * jarg3, int jarg4, int jarg5, int jarg6) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (char *)(arg1)->getDigits(arg2,arg3,arg4,arg5,arg6);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_Transfer(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  char *arg4 = (char *) NULL ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (int)(arg1)->transfer(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_read(void * jarg1, int jarg2, int jarg3, char * jarg4, int jarg5, char * jarg6, int jarg7) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  int arg7 = (int) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (int)jarg7; 
  result = (char *)(arg1)->read(arg2,arg3,(char const *)arg4,arg5,(char const *)arg6,arg7);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_detectSpeech(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  char *arg4 = (char *) NULL ;
  char *arg5 = (char *) NULL ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->detectSpeech(arg2,arg3,arg4,arg5);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_PlayAndGetDigits(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10, int jarg11, char * jarg12) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) NULL ;
  int arg11 = (int) 0 ;
  char *arg12 = (char *) NULL ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  arg10 = (char *)jarg10; 
  arg11 = (int)jarg11; 
  arg12 = (char *)jarg12; 
  result = (char *)(arg1)->playAndGetDigits(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,(char const *)arg10,arg11,(char const *)arg12);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_playAndDetectSpeech(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (char *)(arg1)->playAndDetectSpeech(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_StreamFile(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->streamFile(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_sleep(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int arg2 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->sleep(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_flushEvents(void * jarg1) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (int)(arg1)->flushEvents();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_flushDigits(void * jarg1) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (int)(arg1)->flushDigits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_SetAutoHangup(void * jarg1, unsigned int jarg2) {
  int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)(arg1)->setAutoHangup(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_setHangupHook(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->setHangupHook(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_Ready(void * jarg1) {
  unsigned int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  bool result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (bool)(arg1)->ready();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_bridged(void * jarg1) {
  unsigned int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  bool result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (bool)(arg1)->bridged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_answered(void * jarg1) {
  unsigned int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  bool result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (bool)(arg1)->answered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_mediaReady(void * jarg1) {
  unsigned int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  bool result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (bool)(arg1)->mediaReady();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_waitForAnswer(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  CoreSession *arg2 = (CoreSession *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (CoreSession *)jarg2; 
  (arg1)->waitForAnswer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_Execute(void * jarg1, char * jarg2, char * jarg3) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) NULL ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->execute((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_sendEvent(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  Event *arg2 = (Event *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (Event *)jarg2; 
  (arg1)->sendEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_setEventData(void * jarg1, void * jarg2) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  Event *arg2 = (Event *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (Event *)jarg2; 
  (arg1)->setEventData(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_getXMLCDR(void * jarg1) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (char *)(arg1)->getXMLCDR();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_begin_allow_threads(void * jarg1) {
  unsigned int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  bool result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (bool)(arg1)->begin_allow_threads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_end_allow_threads(void * jarg1) {
  unsigned int jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  bool result;
  
  arg1 = (CoreSession *)jarg1; 
  result = (bool)(arg1)->end_allow_threads();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_GetUuid(void * jarg1) {
  char * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (char *)((CoreSession const *)arg1)->get_uuid();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_get_cb_args(void * jarg1) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  switch_input_args_t *result = 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  result = (switch_input_args_t *) &((CoreSession const *)arg1)->get_cb_args();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_check_hangup_hook(void * jarg1) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  (arg1)->check_hangup_hook();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_run_dtmf_callback(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  CoreSession *arg1 = (CoreSession *) 0 ;
  void *arg2 = (void *) 0 ;
  switch_input_type_t arg3 ;
  switch_input_type_t *argp3 ;
  switch_status_t result;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (void *)jarg2; 
  argp3 = (switch_input_type_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null switch_input_type_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->run_dtmf_callback(arg2,arg3);
  jresult = new switch_status_t((const switch_status_t &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_consoleLog(void * jarg1, char * jarg2, char * jarg3) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->consoleLog(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_CoreSession_consoleLog2(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, char * jarg6) {
  CoreSession *arg1 = (CoreSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (CoreSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->consoleLog2(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_console_log(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  console_log(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_console_log2(char * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  console_log2(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_console_clean_log(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  console_clean_log(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_switch_msleep(unsigned int jarg1) {
  unsigned int arg1 ;
  
  arg1 = (unsigned int)jarg1; 
  switch_msleep(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeSWITCH_bridge(void * jarg1, void * jarg2) {
  CoreSession *arg1 = 0 ;
  CoreSession *arg2 = 0 ;
  
  arg1 = (CoreSession *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CoreSession & type is null", 0);
    return ;
  } 
  arg2 = (CoreSession *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CoreSession & type is null", 0);
    return ;
  } 
  bridge(*arg1,*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_hanguphook(void * jarg1) {
  void * jresult ;
  switch_core_session_t *arg1 = (switch_core_session_t *) 0 ;
  switch_status_t result;
  
  arg1 = (switch_core_session_t *)jarg1; 
  result = hanguphook(arg1);
  jresult = new switch_status_t((const switch_status_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeSWITCH_dtmf_callback(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  switch_core_session_t *arg1 = (switch_core_session_t *) 0 ;
  void *arg2 = (void *) 0 ;
  switch_input_type_t arg3 ;
  void *arg4 = (void *) 0 ;
  unsigned int arg5 ;
  switch_input_type_t *argp3 ;
  switch_status_t result;
  
  arg1 = (switch_core_session_t *)jarg1; 
  arg2 = (void *)jarg2; 
  argp3 = (switch_input_type_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null switch_input_type_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (void *)jarg4; 
  arg5 = (unsigned int)jarg5; 
  result = dtmf_callback(arg1,arg2,arg3,arg4,arg5);
  jresult = new switch_status_t((const switch_status_t &)result); 
  return jresult;
}


#ifdef __cplusplus
}
#endif

